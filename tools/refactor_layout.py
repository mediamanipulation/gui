# refactor_layout.py  (drop anywhere, run once)

import sys, re, shutil, datetime, textwrap
from pathlib import Path

# ------------------------- usage / path setup -------------------------
if len(sys.argv) != 2:
    print("Usage: python refactor_layout.py path/to/gui/ui/layout.py")
    sys.exit(1)

LAYOUT_PATH = Path(sys.argv[1]).expanduser().resolve()
if not LAYOUT_PATH.exists():
    sys.exit(f"[!] {LAYOUT_PATH} does not exist")

COMP_DIR = LAYOUT_PATH.parent / "components"
PROJECT_ROOT = LAYOUT_PATH.parents[3]  # only used for nice relative prints

# ------------------------- constants ----------------------------------
COMPONENT_ORDER = [
    "header_bar",
    "main_file_section",
    "presets_section",
    "column_controls_section",
    "reference_join_section",
    "config_export_section",
    "status_bar",
]

HEADER_TMPL = (
    '"""Autogenerated component extracted from layout.py."""\n\n'
    "import tkinter as tk\nfrom tkinter import ttk, messagebox\n\n"
    "from gui.ui.utils import *\n"
    "from gui.core.config_manager import load_config\n"
    "try:\n    from gui.ui.custom_widgets import FormulaEntry, TooltipButton, ProgressDialog\n"
    "except ImportError:\n    pass\n\n"
)

ORCH_TMPL = """\
\"\"\"Slim orchestrator, auto-generated.\"\"\"

from gui.ui.theme import apply_theme
from gui.ui import utils as U
from gui.ui.components import {imports}


def build_layout(app):
    if U.USE_ENHANCED_UI:
        app.theme = apply_theme(app.root)

    app.root.title("Matrix Exporter")
    app.root.geometry("1100x700")
    app.root.minsize(900, 600)

{calls}
    return app
"""

# ------------------------- helpers ------------------------------------
def snake(create_name: str) -> str:
    return create_name.replace("create_", "").rstrip("_")

def extract_functions(source: str):
    pattern = re.compile(
        r"^def (create_[A-Za-z0-9_]+)\s*\([^)]*\):\n"
        r"(?:    .*\n)+?", re.MULTILINE)
    out = {}
    for m in pattern.finditer(source):
        out[m.group(1)] = m.group(0)
    return out

# ------------------------- main logic ---------------------------------
def main():
    print(f"[*] Refactoring {LAYOUT_PATH.relative_to(PROJECT_ROOT)}")

    COMP_DIR.mkdir(parents=True, exist_ok=True)
    (COMP_DIR / "__init__.py").touch(exist_ok=True)

    raw_src = LAYOUT_PATH.read_text(encoding="utf-8")
    funcs = extract_functions(raw_src)

    for create_name, body in funcs.items():
        comp_name = snake(create_name)
        comp_path = COMP_DIR / f"{comp_name}.py"
        if comp_path.exists():
            print(f"  – {comp_name}.py exists, skipping")
            continue

        body_lines = body.splitlines()[1:]               # drop def line
        body_unind = "\n".join(l[4:] for l in body_lines)
        comp_code = HEADER_TMPL + "def build(app):\n" + textwrap.indent(body_unind, "    ")
        comp_path.write_text(comp_code, encoding="utf-8")
        print(f"  ✓ wrote {comp_path.relative_to(PROJECT_ROOT)}")

    # write new orchestrator
    imports = ", ".join(COMPONENT_ORDER)
    calls   = "\n".join(f"    {name}.build(app)" for name in COMPONENT_ORDER)
    new_layout = ORCH_TMPL.format(imports=imports, calls=calls)

    backup = LAYOUT_PATH.with_suffix(".bak_" + datetime.datetime.now().strftime("%Y%m%d_%H%M%S"))
    shutil.copy2(LAYOUT_PATH, backup)
    LAYOUT_PATH.write_text(new_layout, encoding="utf-8")
    print(f"  ↺ replaced layout.py (backup saved to {backup.name})")

    print("\n[OK] Layout split complete – run your GUI to verify.")

if __name__ == "__main__":
    main()
