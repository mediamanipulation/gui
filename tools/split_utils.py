# tools/split_utils.py
import sys, textwrap, shutil, datetime
from pathlib import Path
import re

if len(sys.argv) != 2:
    sys.exit("Usage: python split_utils.py path/to/gui/ui/utils.py")

UTILS = Path(sys.argv[1]).expanduser().resolve()
ROOT  = UTILS.parents[2]            # project root for pretty prints
HELPERS_DIR = UTILS.parent / "helpers"
HELPERS_DIR.mkdir(exist_ok=True)
(HELPERS_DIR / "__init__.py").touch(exist_ok=True)

# -------------- extraction table (regex -> destination file) -------------
PATTERNS = {
    r"^# Color palette.*?(?=^def|\Z)":               "palette.py",
    r"^def create_tooltip.*?(?=^def|\Z)":            "tooltips.py",
    r"^def create_help_button.*?(?=^def|\Z)":        "tooltips.py",
    r"^def show_.*?message.*?(?=^def|\Z)":           "dialogs.py",
    r"^def create_status_bar.*?(?=^def|\Z)":         "statusbar.py",
    r"^def flash_.*?message.*?(?=^def|\Z)":          "statusbar.py",
    r"^def apply_modern_theme.*?(?=^def|\Z)":        "window.py",
    r"^def center_window.*?(?=^def|\Z)":             "window.py",
    r"^def save_app_settings.*?(?=^def|\Z)":         "file_utils.py",
    r"^def load_app_settings.*?(?=^def|\Z)":         "file_utils.py",
    r"^def create_backup_file.*?(?=^def|\Z)":        "file_utils.py",
    r"^PAD_X.*?FIELD_PAD.*":                         "palette.py",  # spacing consts
}

MODULE_SRC = {name: [] for name in set(PATTERNS.values())}

src = UTILS.read_text(encoding="utf-8")
for regex, fname in PATTERNS.items():
    for match in re.finditer(regex, src, re.M | re.S):
        MODULE_SRC[fname].append(match.group(0))
        src = src.replace(match.group(0), "")   # strip from main utils

# -------------- write helper modules --------------------------------------
HEADER = '"""Extracted from utils.py – generated by split_utils.py."""\n\n'

for fname, chunks in MODULE_SRC.items():
    if not chunks:
        continue
    code = HEADER + "\n\n".join(chunk.rstrip() for chunk in chunks) + "\n"
    (HELPERS_DIR / fname).write_text(code, encoding="utf-8")
    print(f" ✓ wrote helpers/{fname}")

# -------------- update utils.py -------------------------------------------
BACK = UTILS.with_suffix(".bak_" + datetime.datetime.now().strftime("%Y%m%d_%H%M%S"))
shutil.copy2(UTILS, BACK)
print(f"Backup saved → {BACK.relative_to(ROOT)}")

UTILS.write_text(
    '"""Facade that re-exports symbols from gui.ui.helpers.*"""\n\n'
    "from importlib import import_module as _imp\n"
    "__all__ = []\n"
    "for _mod in [\n"
    "    'palette', 'tooltips', 'dialogs', 'statusbar', 'window', 'file_utils']:\n"
    "    m = _imp(f'gui.ui.helpers.{_mod}')\n"
    "    globals().update({k:v for k,v in m.__dict__.items() if not k.startswith('_')})\n"
    "    __all__.extend([k for k in m.__dict__ if not k.startswith('_')])\n",
    encoding="utf-8",
)
print("Re-wrote utils.py as thin re-export façade")
print("\n[Done] Run your app and confirm all imports still resolve.")
